package internetcafe;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

import internetcafe.product.Product;
import internetcafe.user.Administrator;
import internetcafe.user.Customer;
import internetcafe.user.Member;
import internetcafe.user.Nonmember;

/*
* 클래스명 : Display    // UI담당
* 
* 버전 정보 v.1.0.1
* 
* 마지막 업데이트 날짜 : 2020 - 03 - 26
* 
* 작업자 : 박민혜
*/
public class Display {
	private static final int MAX_ROW_INDEX = 4;
	private static final int MAX_COL_INDEX = 5;
	private HashMap<String, Member> memberList; // 선언만
	private List<Nonmember> nonmemberList; // 선언만
	private Customer[][] seat; // 선언만
	private List<Product> foodlist; // 선언만
	String memberId;
	String memberPwd;
	String memberName;
	String memberPhoneNum;
	Member member;
	

	Scanner sc = new Scanner(System.in);

	public Display() { // 생성자
		this.memberList = new HashMap<String, Member>(); // 생성
		this.nonmemberList = new ArrayList<Nonmember>(); // 생성
		this.seat = new Customer[MAX_ROW_INDEX][MAX_COL_INDEX]; // 생성
		this.foodlist = new ArrayList<Product>(); // 생성
	}

	// 메인화면 ==========================================================
	public void showMain() {
		System.out.println("=====어서오세요 사조 피시방=====");
		System.out.println("이용하시려면 아무키나 입력하세요: ");
		String smInput = sc.nextLine(); // smInput: showMain Input이란 뜻

		if (smInput.equals("admin") == true)
			adminMenu(); // admin을 입력하면 관리자메뉴로 가세요

		showSeat(); // 아무키나 입력하면 좌석을 보여준다
	}

	// 좌석 보여주기==========================================================
	public void showSeat() {
		System.out.println("  -- 1 --- 2 --- 3 --- 4 --- 5 --");
		for (int i = 0; i < this.seat.length; i++) {
			System.out.printf("%d| ", i + 1);
			for (int j = 0; j < this.seat[i].length; j++) {
				System.out.printf("[%s]", this.seat[i][j] == null ? "    " : "이용중");

			} // 좌석의 값이 null인지? 맞으면 이용가능 : 차있으면 이용중

			System.out.println(); // 보기 편하게 한 행(row)이 끝날때마다 엔터
		}

		selectSeat(); // 좌석고르기

	}

	// 좌석 고르기==========================================================
	private void selectSeat() {
		do {
			try {

				System.out.println("좌석은 선택해주세요(ex. 1-3)>>");
				String inputSeat = sc.nextLine();
				String[] seatArr = inputSeat.trim().replace(" ", "").split("-");
				// 고객이 입력한 값의" "를 ""로 바꾸고, ","로 구분하겠다.

				int row = Integer.parseInt(seatArr[0]) - 1; // 사용자가 입력한걸 배열의 인덱스로 바꿔야하니까
				int col = Integer.parseInt(seatArr[1]); // 아까 숫자로 열 하나 추가했으니 이건 안빼줘도 됨

				if (row > MAX_ROW_INDEX || col > MAX_COL_INDEX) {
					throw new Exception(); // 배열을 벗어난 자리
				}

				if (seat[row][col] == null) { // seat[i][j]가 빈좌석일 때
					System.out.println("좌석선택 완료");
					selectCustomer(); // 회원/비회원고르는 메서드
					break;

				} else {
					throw new Exception(); // 이미 예약된 자리
				}

			} catch (Exception e) {
				System.out.println("좌석선택 실패 | 좌석을 다시 선택해주세요.");
				e.getStackTrace();
				System.out.println(e.getMessage());
				System.out.println("좌석은 [1-1]부터 [4-5]까지만 존재합니다!");
				System.out.println("================================");
			}

		} while (true);

	}

	// 회원/비회원 ==========================================================
	private void selectCustomer() {
		while (true) {
			System.out.println("1| 회원");
			System.out.println("2| 비회원");
			System.out.println("3| 종료");

			int scInput = Integer.parseInt(sc.nextLine());

			switch (scInput) {
			case 1:
				selectMember(); // 회원은 회원메뉴로
				break;

			case 2:
				selectNonMember(); // 비회원은 비회원메뉴로
				break;

			case 3:
				System.out.println("이용해주셔서 감사합니다.");
				showMain();
				break;

			default:
				System.out.println("잘못된 메뉴입니다. 다시 입력해주세요!");
				break;
			}

		}

	}

	// 회원 ==========================================================
	private void selectMember() {
		login();
	}

	// 로그인==========================================================
	private Member login() {
		System.out.println("아이디>> ");
		String id = sc.nextLine();
		System.out.println("비밀번호>> ");
		String pwd = sc.nextLine();

		Member loginUser = memberList.get(id);
		if (loginUser != null && loginUser.getId().equals(id) && loginUser.getPwd().equals(pwd)) {
			System.out.println("로그인 성공!");
			return loginUser;

			// 이제 시간선택 메서드로 넘어가야하는데 흐으으으으으으으으으으으으음

		} else {
			System.out.println("잘못 입력 되었습니다 , 다시 입력해주세요");
		}

		return null;
	}

	// 로그인성공 후 회원메뉴==========================================================
	private void customerUi(){
//		이용자 ui
//		충전한 시간 조회 및 추가
//		음식 주문
//		주문한 음식 조회
//		로그아웃
//		화면 나가기

			System.out.println("1. 충전한 시간 조회 및 추가    2. 음식주문    3. 주문한 음식 조회     4. 화면 나가기");
			int customerUi_select = sc.nextInt();
			sc.nextLine();

			switch (customerUi_select) {

			case 1:
				orderTime();
				break;

			case 2:
				orderFood();
				break;

			case 3:
				showFoodList();
				break;

			case 4:
				System.out.println("이용해주셔서 감사합니다");
				showMain();

			default:
				System.out.println("잘못된 메뉴입니다. 다시 입력해주세요. ");
				break;

			}

		}
		
	//========================	
		
		
		
		
	private void showFoodList() {
		// TODO Auto-generated method stub
		
	}

	private void orderFood() {
		// TODO Auto-generated method stub
		
	}

	private void orderTime() {
		// TODO Auto-generated method stub
		
	}







	
	
	
	
	
	
	
	
	
	
	// 비회원==========================================================
	private void selectNonMember() {
		while (true) {
			System.out.println("1| 카드발급"); // 카드번호는 온 순서대로!
			System.out.println("2| 회원가입");
			System.out.println("3|  종료");

			int snmInput = Integer.parseInt(sc.nextLine()); // selectNonMember의 Input이란 뜻임

			switch (snmInput) {
			case 1: // 카드발급 메서드...
				break;

			case 2:
				signUp();
				break;

			case 3:
				System.out.println("이용해주셔서 감사합니다.");
				showMain();
				break;

			default:
				System.out.println("잘못된 메뉴입니다. 다시 입력해주세요!");
				break;
			}

		}
	}

	// 회원가입 입력==========================================================
	private void signUp() {
		member = new Member();

		idCheck();
		pwdCheck();
		nameCheck();

		// memberList.put(member.getId(), member);

		System.out.println("회원가입이 완료되었습니다.");
		// Member member = new Member(String id, String pwd, String name, String
		// phonenum);
		login();

	}

	// 중복 및 정규표현식==========================================================
	public void idCheck() {
		while(true) {
		System.out.print("생성할 아이디를 입력해주세요 >>");
		String memberId = sc.nextLine().replace(" ", "");
		String regExp = "^[a-zA-Z]{1}[a-zA-Z0-9]{5,11}$";
		boolean bId = memberId.matches(regExp);

		if (bId == true) {
			if (memberList.containsKey(memberId)) {
				System.out.println("이미 존재하는 Id입니다.");
				
			}else {
			
			System.out.println("생성가능한 Id입니다.");
			//member.setId(memberId);
			this.memberId = memberId;
			break;
			
			}

		} else {
			System.out.println("※Id는 영문 대소문자와 숫자를 조합하여 6~12자로 입력해주세요.");
			
		}
		

		System.out.println("id: " + memberId);
		}
	}

	// pwd 정규표현식체크==========================================================

	public void pwdCheck() {

		pw1: while (true) {
			System.out.print("생성할 비밀번호를 입력해주세요 >> ");
			String memberPwd1 = sc.nextLine().replace(" ", "");
			String regExp1 = "^[a-zA-Z]{1}[0-9_@./#&+-?~]*.{6,12}$";
			boolean bPwd1 = memberPwd1.matches(regExp1);

			if (bPwd1 == true) {

				pw2: while (true) {
					System.out.println("비밀번호를 한번 더 입력해주세요>> ");
					String memberPwd2 = sc.nextLine().replace(" ", "");
					String regExp2 = "^[a-zA-Z]{1}[0-9_@./#&+-?~]*.{6,12}$";
					boolean bPwd2 = memberPwd2.matches(regExp2);

					if (bPwd2 == true) {

						if (memberPwd1.equals(memberPwd2) == true) {
							System.out.println("비밀번호가 일치합니다.");
							this.memberPwd = memberPwd1;
							break pw1;

						} else {
							System.out.println("※비밀번호가 일치하지 않습니다. 비밀번호를 처음부터 다시 입력해주세요.");
							break pw2;
						}

					}
				}

			} else {
				System.out.println("※비밀번호는 영문 대소문자와 숫자 또는 특수문자를 조합하여 6~12자로 입력해주세요.");
				continue;
			}

		}

	}

	// 이름 정규표현식체크==========================================================
	public void nameCheck() {

		while (true) {
			System.out.print("성함을 입력해주세요 >>");
			String memberName = sc.nextLine().replace(" ", "");
			String regExp = "^[ㄱ-ㅎ가-힣]*$";
			boolean bName = memberName.matches(regExp);

			if (bName == true) {
				this.memberName = memberName;
				break;
			} else {
				System.out.println("올바른 이름 형식이 아닙니다.");
				continue;
			}
		}
	}

	// 폰번호 정규표현식체크==========================================================

	// 회원가입 파일만들기==========================================================

	
	
	
	// 관리자화면==========================================================
	private void adminMenu() {
		System.out.println("관리자 페이지입니다.");
		System.out.println("비밀번호를 입력해주세요>> ");
		String admin_pw = sc.nextLine();

		// 비번이 맞으면 관리자메뉴 오픈
		if (admin_pw.equals("admin") == true) {
			Administrator admin = new Administrator();
			System.out.println("1. 메뉴추가    2.메뉴삭제    3.정산   4.이용자명단");
			int admin_select = sc.nextInt();
			sc.nextLine();

			switch (admin_select) {

			case 1:
				admin.addProduct();
				break;

			case 2:
				admin.delProduct();
				break;

			case 3:
				admin.showTotalMoney();
				break;

			case 4:
				admin.showMemberList();
				break;

			case 5:
				System.out.println("이용해주셔서 감사합니다");
				showMain();

			default:
				System.out.println("잘못된 메뉴입니다. 다시 입력해주세요. ");
				break;

			}

		}

	}

	// 관리자화면 구성(은 내가만드는거
	// 아님)==========================================================
	public void addProduct() {
	}

	public void delProduct() {
	}

	public void showTotalMoney() {
	}

	public void showMemberList() {
	}

}
